name: Milestone → Wiki (Sprint Review)

on:
  milestone:
    types: [closed]
  workflow_dispatch:
    inputs:
      milestone_number:
        description: "Milestone number to export (optional if event payload present)"
        required: false

permissions:
  contents: write   # needed to push to the wiki repo

jobs:
  export-sprint-to-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Wiki repo
        uses: actions/checkout@v4
        with:
          # The wiki is a separate git repo: <owner>/<repo>.wiki
          repository: ${{ github.repository }}.wiki
          path: wiki
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Sprint Review page + update sidebar
        uses: actions/github-script@v7
        env:
          WIKI_DIR: wiki
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const wikiDir = process.env.WIKI_DIR || 'wiki';
            if (!fs.existsSync(wikiDir)) fs.mkdirSync(wikiDir, { recursive: true });

            const { owner, repo } = context.repo;

            // 1) Determine milestone number
            let milestoneNumber = core.getInput('milestone_number');
            if (!milestoneNumber && context.payload?.milestone?.number) {
              milestoneNumber = String(context.payload.milestone.number);
            }
            if (!milestoneNumber) {
              // Fallback: pick most recently closed milestone
              const closed = await github.paginate(
                github.rest.issues.listMilestones,
                { owner, repo, state: 'closed', sort: 'due_on', direction: 'desc', per_page: 100 }
              );
              if (!closed.length) {
                core.info('No closed milestones found; nothing to write.');
                return;
              }
              milestoneNumber = String(closed[0].number);
            }
            const num = parseInt(milestoneNumber, 10);

            // 2) Fetch milestone details
            const { data: ms } = await github.rest.issues.getMilestone({
              owner, repo, milestone_number: num
            });

            // 3) Fetch issues in milestone (all states)
            const allIssues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: 'all', milestone: num, per_page: 100 }
            );
            const onlyIssues = allIssues.filter(i => !i.pull_request); // exclude PRs (optional)
            const done = onlyIssues.filter(i => i.state === 'closed');
            const todo = onlyIssues.filter(i => i.state !== 'closed');

            // Helpers
            const fmtDate = (s) => s ? new Date(s).toISOString().slice(0,10) : '—';
            const esc = (s) => String(s || '').replace(/\r?\n/g, ' ').trim();
            const linkIssue = (x) => `- [#${x.number}](${x.html_url}) ${x.title}`;

            // 4) Derive sprint page name from milestone title
            // Expecting titles like "Sprint 1 – <something>". If not, still use the title.
            let sprintName = 'Sprint Review';
            const sprintMatch = (ms.title || '').match(/(Sprint\s+\d+)/i);
            if (sprintMatch) sprintName = `${sprintMatch[1]} Review`;
            else sprintName = `${ms.title} Review`;

            const pageFile = path.join(wikiDir, `${sprintName.replace(/\//g, '-')}.md`);

            // 5) Compose page content
            const overviewLines = [
              `# ${sprintName}`,
              '',
              `**Milestone:** [${esc(ms.title)}](${ms.html_url})`,
              `**State:** ${ms.state}`,
              `**Due:** ${fmtDate(ms.due_on)}  |  **Closed:** ${fmtDate(ms.closed_at)}`,
              `**Issues:** ${onlyIssues.length} total — ${done.length} closed / ${todo.length} open`,
              '',
              '---',
              '## Outcomes',
              `- See all issues in the milestone → [${esc(ms.title)}](${ms.html_url})`,
              '',
              '### Completed',
              done.length ? done.map(linkIssue).join('\n') : '_None_',
              '',
              '### Not Completed',
              todo.length ? todo.map(linkIssue).join('\n') : '_None_',
              '',
              '---',
              '## Review Notes',
              '- Highlights: _fill in_',
              '- Demos: _links/screenshots_',
              '',
              '## Retrospective (optional)',
              '- What went well: _fill in_',
              '- What can improve: _fill in_',
              '- Actions: _fill in_',
              '',
              '---',
              '## Links',
              `- Milestone: ${ms.html_url}`,
              `- Repository: https://github.com/${owner}/${repo}`,
              ''
            ].join('\n');

            // Ensure Home.md exists once
            const homeMd = path.join(wikiDir, 'Home.md');
            if (!fs.existsSync(homeMd)) {
              const home = [
                '# Project Wiki',
                '',
                `Welcome to the ${repo} Wiki.`,
                '',
                'See recent Sprints in the sidebar.',
                ''
              ].join('\n');
              fs.writeFileSync(homeMd, home, 'utf8');
            }

            // Write/Update sprint page
            fs.writeFileSync(pageFile, overviewLines, 'utf8');
            core.info(`Wrote wiki page: ${pageFile}`);

            // 6) Rebuild _Sidebar.md with latest 3 closed sprints
            const closed = await github.paginate(
              github.rest.issues.listMilestones,
              { owner, repo, state: 'closed', sort: 'due_on', direction: 'desc', per_page: 100 }
            );

            // Map closed milestones to their Sprint N (or raw title) and page name
            const entries = closed.slice(0, 3).map(m => {
              const mMatch = (m.title || '').match(/(Sprint\s+\d+)/i);
              const title = mMatch ? `${mMatch[1]} Review` : `${m.title} Review`;
              const fileName = `${title.replace(/\//g, '-')}.md`; // wiki page file
              return { title, fileName };
            });

            const sidebar = [
              '[[Home]]',
              '',
              '## Sprints',
              ...entries.map(e => `- [[${e.title}|${e.fileName.replace(/\.md$/,'')}]]`),
              ''
            ].join('\n');

            const sidebarFile = path.join(wikiDir, '_Sidebar.md');
            fs.writeFileSync(sidebarFile, sidebar, 'utf8');
            core.info(`Updated sidebar: ${sidebarFile}`);

      - name: Commit & Push wiki changes
        run: |
          cd wiki
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "docs(wiki): ${GITHUB_REF_NAME:-main} – Sprint Review export" || echo "No changes to commit."
          git push
