name: Update Sprint Badge

on:
  schedule:
    - cron: '0 6 * * *'   # daily at 06:00 UTC
  workflow_dispatch:
  issues:
    types: [opened, edited, closed, deleted, reopened]
  milestone:
    types: [created, edited, closed, opened]

permissions:
  contents: write
  issues: read

jobs:
  update-badge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine sprint from milestones
        id: sprint
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // 1) Prefer earliest open milestone (by due date asc)
            const open = await github.rest.issues.listMilestones({
              owner, repo, state: 'open', sort: 'due_on', direction: 'asc'
            });

            let chosen = open.data[0];
            let status = 'Planned';
            let color = 'lightgrey';

            if (!chosen) {
              // 2) Otherwise, most recent closed milestone
              const closed = await github.rest.issues.listMilestones({
                owner, repo, state: 'closed', sort: 'due_on', direction: 'desc'
              });
              chosen = closed.data[0] || null;
              if (chosen) { status = 'Completed'; color = 'success'; }
            } else {
              const today = new Date().toISOString().slice(0,10);
              const due = chosen.due_on ? chosen.due_on.slice(0,10) : null;
              const closedCount = chosen.closed_issues || 0;

              if (due && due < today) { status = 'Overdue'; color = 'red'; }
              else if (closedCount > 0) { status = 'In Progress'; color = 'blue'; }
              else { status = 'Planned'; color = 'lightgrey'; }
            }

            function hyphenate(s){ return String(s || '').trim().replace(/\s+/g, '-'); }
            const m = chosen && chosen.title ? chosen.title.match(/Sprint\s+(\d+)/i) : null;
            const sprintNum = m ? m[1] : (chosen ? chosen.title : 'N-A');
            const statusLabel = String(status).replace(/\s+/g, '--');
            const label = `Sprint-${hyphenate(sprintNum)}--${statusLabel}`;

            const badge = `<img alt="Sprint" src="https://img.shields.io/badge/${encodeURIComponent(label)}-${color}">`;
            core.setOutput('badge', badge);

      - name: Update README badge between inline markers
        if: ${{ steps.sprint.outputs.badge != '' }}
        env:
          BADGE: ${{ steps.sprint.outputs.badge }}
        run: |
          python - <<'PY'
          import os, re, sys
          fn = "README.md"
          with open(fn, "r", encoding="utf-8") as f:
              txt = f.read()
          badge = os.environ.get("BADGE", "").strip()
          if not badge:
              print("No BADGE provided; skipping.")
              sys.exit(0)
          # Replace ONLY the inline-badge section
          pat = r"<!--\s*SPRINT BADGE START\s*-->.*?<!--\s*SPRINT BADGE END\s*-->"
          repl = f"<!-- SPRINT BADGE START -->{badge}<!-- SPRINT BADGE END -->"
          new = re.sub(pat, repl, txt, flags=re.S)
          if new == txt:
              print("No change to README.md")
          with open(fn, "w", encoding="utf-8") as f:
              f.write(new)
          PY

      - name: Commit changes
        if: ${{ steps.sprint.outputs.badge != '' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(readme): update inline Sprint badge from milestone"
          file_pattern: README.md
