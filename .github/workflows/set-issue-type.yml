name: Set issue Type from labels

on:
  issues:
    types: [opened, labeled, reopened]

permissions:
  issues: write

jobs:
  set-type:
    runs-on: ubuntu-latest
    steps:
      - name: Map label -> type name
        id: map
        run: |
          labels_json='${{ toJson(github.event.issue.labels.*.name) }}'
          TYPE_NAME=""
          if echo "$labels_json" | grep -qi '"bug"';          then TYPE_NAME="Bug";          fi
          if echo "$labels_json" | grep -qi '"enhancement"';  then TYPE_NAME="Enhancement";  fi
          if echo "$labels_json" | grep -qi '"documentation"';then TYPE_NAME="Documentation";fi
          if echo "$labels_json" | grep -qi '"duplicate"';    then TYPE_NAME="Duplicate";    fi
          if echo "$labels_json" | grep -qi '"epic"';          then TYPE_NAME="Epic";         fi
          echo "TYPE_NAME=$TYPE_NAME" >> $GITHUB_OUTPUT
          echo "Mapped TYPE_NAME=$TYPE_NAME"

      - name: Skip if no mapped type
        if: steps.map.outputs.TYPE_NAME == ''
        run: echo "No matching label for Issue Type. Skipping."

      - name: Look up Issue Type ID (GraphQL)
        if: steps.map.outputs.TYPE_NAME != ''
        id: lookup
        uses: actions/github-script@v7
        env:
          TYPE_NAME: ${{ steps.map.outputs.TYPE_NAME }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const typeName = process.env.TYPE_NAME;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const q = `
              query($owner:String!, $repo:String!) {
                repository(owner:$owner, name:$repo) {
                  id
                  owner {
                    __typename
                    ... on Organization {
                      id
                      login
                      issueTypes(first:50) {
                        nodes { id, name }
                      }
                    }
                  }
                }
              }`;
            const data = await github.graphql(q, { owner, repo });

            const org = data.repository.owner;
            if (!org || org.__typename !== "Organization" || !org.issueTypes) {
              throw new Error("Issue Types are not enabled for this organization.");
            }

            const match = org.issueTypes.nodes.find(
              t => t.name.toLowerCase() === typeName.toLowerCase()
            );
            if (!match) {
              throw new Error(`No Issue Type named "${typeName}" found. Create it in org settings, or adjust your mapping.`);
            }

            console.log(`Resolved Issue Type "${typeName}" -> ${match.id}`);
            // Returned value becomes steps.lookup.outputs.result
            return match.id;

      - name: Set Issue Type (GraphQL)
        if: steps.map.outputs.TYPE_NAME != ''
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TYPE_ID: ${{ steps.lookup.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner  = context.repo.owner;
            const repo   = context.repo.repo;
            const number = parseInt(process.env.ISSUE_NUMBER, 10);
            const issueTypeId = process.env.ISSUE_TYPE_ID;

            const q1 = `
              query($owner:String!, $repo:String!, $number:Int!) {
                repository(owner:$owner, name:$repo) {
                  issue(number:$number) { id }
                }
              }`;
            const d1 = await github.graphql(q1, { owner, repo, number });
            const issueId = d1.repository.issue.id;

            const mut = `
              mutation($issueId:ID!, $issueTypeId:ID!) {
                updateIssue(input: {id:$issueId, issueTypeId:$issueTypeId}) {
                  issue { id number }
                }
              }`;
            await github.graphql(mut, { issueId, issueTypeId });
            console.log(`Issue #${number}: type updated.`);
