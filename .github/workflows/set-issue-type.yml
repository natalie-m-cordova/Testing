name: Set issue Type from labels

on:
  issues:
    types: [opened, labeled, reopened]

permissions:
  issues: write

jobs:
  set-type:
    runs-on: ubuntu-latest
    steps:
      - name: Map label -> type name
        id: map
        run: |
          labels_json='${{ toJson(github.event.issue.labels.*.name) }}'
          TYPE_NAME=""
          if echo "$labels_json" | grep -qi '"bug"';          then TYPE_NAME="Bug";          fi
          if echo "$labels_json" | grep -qi '"enhancement"';  then TYPE_NAME="Enhancement";  fi
          if echo "$labels_json" | grep -qi '"documentation"';then TYPE_NAME="Documentation";fi
          if echo "$labels_json" | grep -qi '"duplicate"';    then TYPE_NAME="Duplicate";    fi
          if echo "$labels_json" | grep -qi '"epic"';          then TYPE_NAME="Epic";         fi
          echo "TYPE_NAME=$TYPE_NAME" >> $GITHUB_OUTPUT
          echo "Mapped TYPE_NAME=$TYPE_NAME"

      - name: Stop if no mapped type
        if: steps.map.outputs.TYPE_NAME == ''
        run: echo "No matching label for Issue Type. Skipping."

      - name: Inspect owner type (User vs Organization)
        id: owner
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const q = `
              query($owner:String!, $repo:String!) {
                repository(owner:$owner, name:$repo) {
                  owner { __typename login }
                }
              }`;
            const d = await github.graphql(q, { owner, repo });
            return d.repository.owner.__typename; // "User" or "Organization"

      - name: Stop if repo is user-owned (Issue Types are org-only)
        if: steps.owner.outputs.result == 'User'
        run: |
          echo "Repository owner is a User. Issue Types are org-only. Skipping."
          exit 0

      - name: Look up Issue Type ID (GraphQL via PAT)
        if: steps.map.outputs.TYPE_NAME != '' && steps.owner.outputs.result == 'Organization'
        id: lookup
        uses: actions/github-script@v7
        env:
          TYPE_NAME: ${{ steps.map.outputs.TYPE_NAME }}
        with:
          github-token: ${{ secrets.ORG_GRAPHQL_TOKEN }}   # <-- your PAT secret
          result-encoding: string
          script: |
            const typeName = process.env.TYPE_NAME;
            const { owner, repo } = context.repo;

            const q = `
              query($owner:String!, $repo:String!) {
                repository(owner:$owner, name:$repo) {
                  id
                  owner {
                    __typename
                    ... on Organization {
                      id
                      issueTypes(first:100) { nodes { id, name } }
                    }
                  }
                }
              }`;
            const data = await github.graphql(q, { owner, repo });

            const org = data.repository.owner;
            if (!org || org.__typename !== "Organization" || !org.issueTypes) {
              throw new Error("Issue Types not enabled or not accessible for this organization (check PAT scopes + SSO).");
            }
            const match = org.issueTypes.nodes.find(t => t.name.toLowerCase() === typeName.toLowerCase());
            if (!match) throw new Error(`Issue Type "${typeName}" not found. Create it in org settings or adjust mapping.`);
            console.log(`Resolved Issue Type "${typeName}" -> ${match.id}`);
            return match.id;

      - name: Set Issue Type (GraphQL via PAT)
        if: steps.map.outputs.TYPE_NAME != '' && steps.owner.outputs.result == 'Organization'
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TYPE_ID: ${{ steps.lookup.outputs.result }}
        with:
          github-token: ${{ secrets.ORG_GRAPHQL_TOKEN }}   # <-- your PAT secret
          script: |
            const { owner, repo } = context.repo;
            const number = parseInt(process.env.ISSUE_NUMBER, 10);
            const issueTypeId = process.env.ISSUE_TYPE_ID;

            const q1 = `
              query($owner:String!, $repo:String!, $number:Int!) {
                repository(owner:$owner, name:$repo) {
                  issue(number:$number) { id }
                }
              }`;
            const d1 = await github.graphql(q1, { owner, repo, number });
            const issueId = d1.repository.issue.id;

            const mut = `
              mutation($issueId:ID!, $issueTypeId:ID!) {
                updateIssue(input: {id:$issueId, issueTypeId:$issueTypeId}) {
                  issue { id number }
                }
              }`;
            await github.graphql(mut, { issueId, issueTypeId });
            console.log(`Issue #${number}: type updated.`)
