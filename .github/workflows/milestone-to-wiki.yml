name: Milestone → Wiki (foldered Sprints + Sidebar)

on:
  milestone:
    types: [closed]
  workflow_dispatch:
    inputs:
      milestone_number:
        description: "Milestone number to export (optional)"
        required: false

permissions:
  contents: write

env:
  MAX_LATEST: "3"   # set "2" if you want only the last two sprints

jobs:
  export-sprint-to-wiki:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Wiki repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: wiki
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Sprint pages + update sidebar (foldered)
        uses: actions/github-script@v7
        env:
          WIKI_DIR: wiki
          MAX_LATEST: ${{ env.MAX_LATEST }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const wikiDir = process.env.WIKI_DIR || 'wiki';
            if (!fs.existsSync(wikiDir)) fs.mkdirSync(wikiDir, { recursive: true });

            const { owner, repo } = context.repo;

            // helpers
            const fmtDate = (s) => s ? new Date(s).toISOString().slice(0,10) : '—';
            const esc = (s) => String(s || '').replace(/\r?\n/g, ' ').trim();
            const mkdirp = (p) => fs.mkdirSync(p, { recursive: true });
            const writeIfMissing = (file, content) => { if (!fs.existsSync(file)) fs.writeFileSync(file, content, 'utf8'); };

            // Keep slashes for folder structure, sanitize other chars
            const safePath = (title) => String(title).replace(/[<>:"|?*]/g, '-').replace(/\s+/g, ' ').trim();

            // Determine which milestone to export
            let milestoneNumber = core.getInput('milestone_number');
            if (!milestoneNumber && context.payload?.milestone?.number) {
              milestoneNumber = String(context.payload.milestone.number);
            }

            const closedMilestones = await github.paginate(
              github.rest.issues.listMilestones,
              { owner, repo, state: 'closed', sort: 'due_on', direction: 'desc', per_page: 100 }
            );
            const openMilestones = await github.paginate(
              github.rest.issues.listMilestones,
              { owner, repo, state: 'open', sort: 'due_on', direction: 'asc', per_page: 100 }
            );

            if (!milestoneNumber) {
              if (closedMilestones.length > 0) milestoneNumber = String(closedMilestones[0].number);
              else if (openMilestones.length > 0) milestoneNumber = String(openMilestones[0].number);
            }

            async function writeSprintReview(msNumber) {
              const { data: ms } = await github.rest.issues.getMilestone({ owner, repo, milestone_number: msNumber });

              // Gather issues (exclude PRs)
              const allItems = await github.paginate(
                github.rest.issues.listForRepo,
                { owner, repo, state: 'all', milestone: msNumber, per_page: 100 }
              );
              const onlyIssues = allItems.filter(i => !i.pull_request);
              const done = onlyIssues.filter(i => i.state === 'closed');
              const todo = onlyIssues.filter(i => i.state !== 'closed');
              const linkIssue = (x) => `- [#${x.number}](${x.html_url}) ${x.title}`;

              // Sprint name
              const m = (ms.title || '').match(/(Sprint\s+\d+)/i);
              const sprintBase = m ? m[1] : (ms.title || 'Sprint');

              // Foldered location: wiki/Sprints/<Sprint N>/
              const sprintFolder = path.join(wikiDir, 'Sprints', safePath(sprintBase));
              mkdirp(sprintFolder);

              // Review page
              const reviewFile = path.join(sprintFolder, 'Review.md');
              const reviewMd = [
                `# ${sprintBase} Review`,
                '',
                `**Milestone:** [${esc(ms.title)}](${ms.html_url})`,
                `**State:** ${ms.state}`,
                `**Due:** ${fmtDate(ms.due_on)}  |  **Closed:** ${fmtDate(ms.closed_at)}`,
                `**Issues:** ${onlyIssues.length} total — ${done.length} closed / ${todo.length} open`,
                '',
                '---',
                '## Outcomes',
                `- All issues: [${esc(ms.title)}](${ms.html_url})`,
                '',
                '### Completed',
                done.length ? done.map(linkIssue).join('\n') : '_None_',
                '',
                '### Not Completed',
                todo.length ? todo.map(linkIssue).join('\n') : '_None_',
                '',
                '---',
                '## Review Notes',
                '- Highlights: _fill in_',
                '- Demos: _links/screenshots_',
                '',
                '## Retrospective (optional)',
                '- See the Retro page for this sprint.',
                '',
                '---',
                '## Links',
                `- Milestone: ${ms.html_url}`,
                `- Repository: https://github.com/${owner}/${repo}`,
                ''
              ].join('\n');
              fs.writeFileSync(reviewFile, reviewMd, 'utf8');

              // Retro page scaffold
              const retroFile = path.join(sprintFolder, 'Retro.md');
              writeIfMissing(retroFile, [
                `# ${sprintBase} Retro`,
                '',
                '## What went well',
                '- ',
                '',
                '## What could be improved',
                '- ',
                '',
                '## Action items',
                '- ',
                ''
              ].join('\n'));
            }

            if (milestoneNumber) {
              try { await writeSprintReview(parseInt(milestoneNumber, 10)); }
              catch (e) { core.warning(`Could not write selected milestone #${milestoneNumber}: ${e.message}`); }
            }

            // Ensure Home and static pages exist
            writeIfMissing(path.join(wikiDir, 'Home.md'),
              '# Project Wiki\n\nWelcome to the Wiki. Use the sidebar to navigate recent sprints and practices.\n');

            // Sprints/All.md
            const allSprintsFile = path.join(wikiDir, 'Sprints', 'All.md');
            mkdirp(path.dirname(allSprintsFile));
            writeIfMissing(allSprintsFile, '# All Sprints\n\nLinks to every sprint (add/automate as needed).\n');

            // Practices/How-we-work.md
            const practicesFile = path.join(wikiDir, 'Practices', 'How-we-work.md');
            mkdirp(path.dirname(practicesFile));
            writeIfMissing(practicesFile,
              '# Practices – How we work\n\n- Definition of Done\n- Branching strategy\n- Estimation scale\n');

            // Templates/README.md
            const templatesFile = path.join(wikiDir, 'Templates', 'README.md');
            mkdirp(path.dirname(templatesFile));
            writeIfMissing(templatesFile,
              '# Templates\n\n- Sprint Review template\n- Sprint Retro template\n');

            // Build sidebar with latest N closed sprints
            const maxLatest = parseInt(process.env.MAX_LATEST || '3', 10);
            const latest = closedMilestones.slice(0, maxLatest);

            const sprintBlocks = latest.map(m => {
              const sm = (m.title || '').match(/(Sprint\s+\d+)/i);
              const base = sm ? sm[1] : (m.title || 'Sprint');
              const basePath = `Sprints/${safePath(base)}`;
              const reviewLink = `[[${base} Review|${basePath}/Review]]`;
              const retroLink  = `[[${base} Retro|${basePath}/Retro]]`;

              // ensure folders/pages exist for sidebar-listed sprints
              const sprintFolder = path.join(wikiDir, basePath);
              mkdirp(sprintFolder);
              writeIfMissing(path.join(sprintFolder, 'Review.md'), `# ${base} Review\n\n_(coming soon)_\n`);
              writeIfMissing(path.join(sprintFolder, 'Retro.md'),  `# ${base} Retro\n\n_(coming soon)_\n`);

              return [
                `- ${base}`,
                `  - ${reviewLink}`,
                `  - ${retroLink}`
              ].join('\n');
            }).join('\n');

            const sidebar = [
              '[[Home]]',
              '',
              '## Sprints',
              sprintBlocks || '_No closed sprints yet_',
              '',
              '---',
              '[[All Sprints|Sprints/All]]',
              '[[Practices - How we work|Practices/How-we-work]]',
              '[[Templates|Templates/README]]',
              ''
            ].join('\n');

            fs.writeFileSync(path.join(wikiDir, '_Sidebar.md'), sidebar, 'utf8');

      - name: Commit & Push wiki changes
        run: |
          cd wiki
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "docs(wiki): foldered sprint pages and sidebar" || echo "No changes to commit."
          git push
